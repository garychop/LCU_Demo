/*******************************************************************************/
/*  This file is auto-generated by GUIX Studio. Do not edit this file by hand. */
/*  Modifications to this file should only be made by running the GUIX Studio  */
/*  application and re-generating the application. For more information please */
/*  refer to the GUIX Studio user's guide, or visit our web site at            */
/*  www.expresslogic.com.                                                      */
/*                                                                             */
/*  GUIX Studio Revision 5.4.2.9                                               */
/*  Date (dd.mm.yyyy):  1. 4.2022   Time (hh:mm): 16:17                        */
/*******************************************************************************/


#ifndef _MUREVA_LCU_DEMO_SPECIFICATIONS_H_
#define _MUREVA_LCU_DEMO_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */

#define STATUS_RING_ICON 1
#define WHITE_BOX_ICON 2
#define INFORMATION_TEXT_VIEW_ID 3
#define INSTRUCTION_TEXT_VIEW_ID 4
#define TIME_PROMPT_ID 5
#define INFORMATION_BUTTON 6
#define GREEN_TICK_ICON 7
#define TIME_TICK_PROMPT 8
#define MINUTE_PROMPT_ID 9
#define MUREVA_ICON 10
#define SCREENSAVER_ICON_ID 11
#define SPLASH_WINDOW 12
#define TIME_PROMPT 13
#define PLAY_BTN_ID 14
#define SYSTEM_ERROR_BTN_ID 15
#define MOUTHPIECE_PROMPT_ID 16
#define LIMIT_SWITCH_BTN_ID 17
#define EEPROM_EXPIRED_BTN_ID 18
#define EEPROM_OK_BTN_ID 19
#define EEPROM_FAIL_BTN_ID 20
#define SERIAL_NUMBER_PROMPT_ID 21
#define SERIAL_NUMBER_TEXT_INPUT_ID 22
#define EEPROM_12HOUR_BTN_ID 23
#define IDLE_TIME_BUTTON_ID 24
#define IDLE_TIME_PROMPT_ID 25


/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_ML_TEXT_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID pixelmap_id;
} GX_ICON_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID readonly_fill_color_id;
    GX_RESOURCE_ID readonly_text_color_id;
    GX_CHAR *buffer;
    UINT buffer_size;
} GX_SINGLE_LINE_TEXT_INPUT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_BYTE        whitespace;
    GX_BYTE        line_space;
} GX_ML_TEXT_VIEW_PROPERTIES;

typedef struct
{
   GX_CONST GX_STUDIO_WIDGET *base_info;
   UINT (*base_create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   GX_RECTANGLE size;
} GX_TEMPLATE_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct PRIMARYTEMPLATE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_ICON_BUTTON PrimaryTemplate_Attach_IconButton;
    GX_ICON_BUTTON PrimaryTemplate_Play_Button;
    GX_MULTI_LINE_TEXT_BUTTON PrimaryTemplate_SystemError_Button;
    GX_PROMPT PrimaryTemplate_Mouthpiece_PromptBox;
    GX_TEXT_BUTTON PrimaryTemplate_LimitSwitch_Button;
    GX_TEXT_BUTTON PrimaryTemplate_EEPROM_Expired_Button;
    GX_TEXT_BUTTON PrimaryTemplate_EEPROM_OK_Button;
    GX_TEXT_BUTTON PrimaryTemplate_EEPROM_Fail_Button;
    GX_PROMPT PrimaryTemplate_SerialNumber_Prompt;
    GX_SINGLE_LINE_TEXT_INPUT PrimaryTemplate_SerialNumber_TextInput;
    GX_PROMPT PrimaryTemplate_Mouthpiece_Label;
    GX_TEXT_BUTTON PrimaryTemplate_EEPROM_12HOUR_Button;
    GX_TEXT_BUTTON PrimaryTemplate_IdleTime_Button;
    GX_PROMPT PrimaryTemplate_prompt;
    GX_PROMPT PrimaryTemplate_Idle_Time_Prompt;
} PRIMARYTEMPLATE_CONTROL_BLOCK;

typedef struct PRESSTORESUME_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON PressToResume_Screen_StatusRing_Icon;
    GX_ICON PressToResume_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW PressToResume_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW PressToResume_Screen_Instruction_TextView;
    GX_ICON_BUTTON PressToResume_Screen_PauseIcon_Button;
} PRESSTORESUME_SCREEN_CONTROL_BLOCK;

typedef struct MOUTHPIECEDETACHED_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON MouthpieceDetached_Screen_StatusRing_Icon;
    GX_ICON MouthpieceDetached_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW MouthpieceDetached_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW MouthpieceDetached_Screen_Instruction_TextView;
} MOUTHPIECEDETACHED_SCREEN_CONTROL_BLOCK;

typedef struct THERAPYCOMPLETE_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON TherapyComplete_Screen_StatusRing_Icon;
    GX_ICON TherapyComplete_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW TherapyComplete_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW TherapyComplete_Screen_Instruction_TextView;
} THERAPYCOMPLETE_SCREEN_CONTROL_BLOCK;

typedef struct THERAPY_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON Therapy_Screen_StatusRing_Icon;
    GX_PROMPT Therapy_Screen_Time_Prompt;
    GX_MULTI_LINE_TEXT_BUTTON Therapy_Screen_Information_Button;
    GX_ICON Therapy_Screen_GreenTick_Icon;
    GX_ICON Therapy_Screen_WhiteBox_Icon;
    GX_PROMPT Therapy_Screen_TimeTick_Prompt;
    GX_MULTI_LINE_TEXT_VIEW Therapy_Screen_Information_TextView;
    GX_PROMPT Therapy_Screen_Minute_Prompt;
    GX_MULTI_LINE_TEXT_VIEW Therapy_Screen_Instruction_TextView;
} THERAPY_SCREEN_CONTROL_BLOCK;

typedef struct PRESSTOSTART_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON PressToStart_Screen_StatusRing_Icon;
    GX_ICON PressToStart_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW PressToStart_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW PressToStart_Screen_Instruction_TextView;
    GX_ICON_BUTTON PressToStart_Screen_PauseIcon_Button;
} PRESSTOSTART_SCREEN_CONTROL_BLOCK;

typedef struct STANDBY_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON Standby_Screen_Mureva_Icon;
} STANDBY_SCREEN_CONTROL_BLOCK;

typedef struct EXPIRED_ERROR_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON Expired_Error_Screen_StatusRing_Icon;
    GX_ICON Expired_Error_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW Expired_Error_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW Expired_Error_Screen_Instruction_TextView;
} EXPIRED_ERROR_SCREEN_CONTROL_BLOCK;

typedef struct DAILYLIMITREACHED_ERROR_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON DailyLimitReached_Error_Screen_StatusRing_Icon;
    GX_ICON DailyLimitReached_Error_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW DailyLimitReached_Error_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW DailyLimitReached_Error_Screen_Instruction_TextView;
} DAILYLIMITREACHED_ERROR_SCREEN_CONTROL_BLOCK;

typedef struct READINGERROR_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON ReadingError_Screen_StatusRing_Icon;
    GX_ICON ReadingError_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW ReadingError_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW ReadingError_Screen_Instruction_TextView;
} READINGERROR_SCREEN_CONTROL_BLOCK;

typedef struct SERIALNUMBER_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON SerialNumber_Screen_StatusRing_Icon;
    GX_ICON SerialNumber_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW SerialNumber_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW SerialNumber_Screen_Instruction_TextView;
    GX_ICON_BUTTON SerialNumber_Screen_PauseIcon_Button;
} SERIALNUMBER_SCREEN_CONTROL_BLOCK;

typedef struct READING_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON Reading_Screen_StatusRing_Icon;
    GX_ICON Reading_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW Reading_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW Reading_Screen_Instruction_TextView;
} READING_SCREEN_CONTROL_BLOCK;

typedef struct ERROR_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON Error_Screen_StatusRing_Icon;
    GX_ICON Error_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW Error_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW Error_Screen_Instruction_TextView;
} ERROR_SCREEN_CONTROL_BLOCK;

typedef struct INSERTMOUTHPIECE_SCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON InsertMouthpiece_Screen_StatusRing_Icon;
    GX_ICON InsertMouthpiece_Screen_WhiteBox_Icon;
    GX_MULTI_LINE_TEXT_VIEW InsertMouthpiece_Screen_Information_TextView;
    GX_MULTI_LINE_TEXT_VIEW InsertMouthpiece_Screen_Instruction_TextView;
} INSERTMOUTHPIECE_SCREEN_CONTROL_BLOCK;

typedef struct READYSCREEN_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON ReadyScreen_StatusRing_Icon;
    GX_RADIAL_PROGRESS_BAR ReadyScreen_TherpayTime_RadialProgressBar;
    GX_ICON_BUTTON ReadyScreen_PauseIcon_Button;
    GX_PROMPT ReadyScreen_Time_Prompt;
    GX_MULTI_LINE_TEXT_BUTTON ReadyScreen_Information_Button;
    GX_ICON ReadyScreen_GreenTick_Icon;
    GX_ICON ReadyScreen_WhiteBox_Icon;
    GX_PROMPT ReadyScreen_TimeTick_Prompt;
    GX_MULTI_LINE_TEXT_VIEW ReadyScreen_Information_TextView;
    GX_PROMPT ReadyScreen_Minute_Prompt;
    GX_ICON ReadyScreen_ScreenSaver_Icon;
    GX_MULTI_LINE_TEXT_VIEW ReadyScreen_Instruction_TextView;
} READYSCREEN_CONTROL_BLOCK;

typedef struct SPLASH_WINDOW_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON Splash_Window_MuReva_Logo;
    GX_ICON Splash_Window_StatusRing_Icon;
    GX_PROMPT Splash_Window_Version_Prompt;
    GX_ICON Splash_Window_Mureva_Logo_320x240;
} SPLASH_WINDOW_CONTROL_BLOCK;

typedef struct SAMPLE_TICK_WINDOW_CONTROL_BLOCK_STRUCT
{
    PRIMARYTEMPLATE_CONTROL_BLOCK base;
    GX_ICON Sample_Tick_Window_OneOfSixtyTicks_icon;
    GX_ICON Sample_Tick_Window_icon;
    GX_PROMPT Sample_Tick_Window_Time_Prompt;
} SAMPLE_TICK_WINDOW_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern PRESSTORESUME_SCREEN_CONTROL_BLOCK PressToResume_Screen;
extern MOUTHPIECEDETACHED_SCREEN_CONTROL_BLOCK MouthpieceDetached_Screen;
extern THERAPYCOMPLETE_SCREEN_CONTROL_BLOCK TherapyComplete_Screen;
extern THERAPY_SCREEN_CONTROL_BLOCK Therapy_Screen;
extern PRESSTOSTART_SCREEN_CONTROL_BLOCK PressToStart_Screen;
extern STANDBY_SCREEN_CONTROL_BLOCK Standby_Screen;
extern EXPIRED_ERROR_SCREEN_CONTROL_BLOCK Expired_Error_Screen;
extern DAILYLIMITREACHED_ERROR_SCREEN_CONTROL_BLOCK DailyLimitReached_Error_Screen;
extern READINGERROR_SCREEN_CONTROL_BLOCK ReadingError_Screen;
extern SERIALNUMBER_SCREEN_CONTROL_BLOCK SerialNumber_Screen;
extern READING_SCREEN_CONTROL_BLOCK Reading_Screen;
extern ERROR_SCREEN_CONTROL_BLOCK Error_Screen;
extern INSERTMOUTHPIECE_SCREEN_CONTROL_BLOCK InsertMouthpiece_Screen;
extern READYSCREEN_CONTROL_BLOCK ReadyScreen;
extern SPLASH_WINDOW_CONTROL_BLOCK Splash_Window;
extern SAMPLE_TICK_WINDOW_CONTROL_BLOCK Sample_Tick_Window;
extern PRIMARYTEMPLATE_CONTROL_BLOCK PrimaryTemplate;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT PressToResume_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID PressToResume_Screen_Draw_Function(GX_WINDOW *widget);
UINT MouthpieceDetached_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID MouthpieceDetached_Screen_Draw_Function(GX_WINDOW *widget);
UINT TherapyComplete_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID TherapyComplete_Screen_Draw_Function(GX_WINDOW *widget);
UINT Therapy_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Therapy_Screen_Draw_Function(GX_WINDOW *widget);
UINT PressToStart_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID PressToStart_Screen_Draw_Function(GX_WINDOW *widget);
UINT Standby_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Standby_Screen_Draw_Function(GX_WINDOW *widget);
UINT Expired_Error_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Expired_Error_Screen_Draw_Function(GX_WINDOW *widget);
UINT DailyLimitReached_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID DailyLimitReached_Draw_Function(GX_WINDOW *widget);
UINT ReadingError_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID ReadingError_Screen_Draw_Function(GX_WINDOW *widget);
UINT SerialNumber_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID SerialNumber_Screen_Draw_Function(GX_WINDOW *widget);
UINT Reading_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Reading_Screen_Draw_Function(GX_WINDOW *widget);
UINT Error_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Error_Screen_Draw_Function(GX_WINDOW *widget);
UINT InsertMouthpiece_Screen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID InsertMouthpiece_Screen_Draw_Function(GX_WINDOW *widget);
UINT SplashScreen_Event_Function(GX_WINDOW *widget, GX_EVENT *event_ptr);
UINT Sample_Tick_Window_event_function(GX_WINDOW *widget, GX_EVENT *event_ptr);
VOID Sample_Tick_Window_draw_function(GX_WINDOW *widget);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_CHAR ***language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_multi_line_text_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_radial_progress_bar_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_text_input_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_multi_line_text_view_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_template_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
